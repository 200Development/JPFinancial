@model JPFData.ViewModels.TransactionViewModel

@{
    ViewBag.Title = "Transactions";
}

@Styles.Render("~/Content/transactions.css")


@using (Html.BeginForm("Create", "Transactions", FormMethod.Post))
{

    @Html.AntiForgeryToken();

    <div class="content">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card">
                        <div class="header">
                            <header>Balances</header>
                        </div>
                        <div class="content">
                            <div id="chartTransactions" class="ct-chart"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12" id="selectedTransactionDiv">

                <div class="card col-md-5 mx-auto border-dark" id="selectedTransactionCard">
                    <div class="card-title">
                        <h1 id="selectedTransactionPayee"></h1>
                    </div>
                    <div>
                        <div class="card-body">
                            <h3 id="selectedTransactionEmptyText">Click on a row to edit or delete a transaction</h3>
                            <h3 id="selectedTransactionDate"></h3>
                            <h3 id="selectedTransactionAmount"></h3>
                            <h3 id="selectedTransactionType"></h3>
                            <h3 id="selectedTransactionCategory"></h3>
                            <h3 id="selectedTransactionFrom"></h3>
                            <h3 id="selectedTransactionTo"></h3>
                        </div>
                    </div>
                    <div class="card-footer" id="selectedTransactionFooter">
                        <button class="editButton btn btn-dark" type="submit"><i class="fa fa-edit editIcon"></i><span id="editSelectedTransactionSpan">Edit</span></button>
                        <button class="deleteButton btn btn-dark" type="submit"><i class="fa fa-trash deleteIcon"></i><span id="deleteSelectedTransactionSpan">Delete</span></button>
                    </div>
                </div>


                <div class="col-md-12">
                    <table class="table table-striped table-dark">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Date</th>
                                <th scope="col">Payee</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Type</th>
                                <th scope="col">Category</th>
                                <th scope="col">From</th>
                                <th scope="col">To</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row" class="addButtonColumn"><button class="addButton" type="submit"><i class="fa fa-plus-circle addIcon"></i></button></th>
                                <td>
                                    <div class="form-group">
                                        @Html.EditorFor(model => Model.Transaction.Date, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => Model.Transaction.Date, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group">
                                        @Html.EditorFor(model => model.Transaction.Payee, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Transaction.Payee, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">$</span>
                                        </div>
                                        @Html.EditorFor(model => model.Transaction.Amount, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Transaction.Amount, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group">
                                        @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group">
                                        @Html.EnumDropDownListFor(model => model.Transaction.Category, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Transaction.Category, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group" id="divCreditAccount">
                                        @Html.DropDownListFor(model => model.Transaction.CreditAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => Model.Accounts, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group" id="divDebitAccount">
                                        @Html.DropDownListFor(model => model.Transaction.DebitAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Accounts, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                            </tr>
                            @foreach (var item in Model.Transactions.OrderByDescending(t => t.Date).ThenBy(t => t.Amount))
                            {

                                var rowId = "rowId_" + item.Id;
                                var dateId = "transactionDate_" + item.Id;
                                var payeeId = "transactionPayee_" + item.Id;
                                var amountId = "transactionAmount_" + item.Id;
                                var typeId = "transactionType_" + item.Id;
                                var categoryId = "transactionCategory_" + item.Id;
                                var creditAccountId = "transactionCreditAccount_" + item.Id;
                                var debitAccountId = "transactionDebitAccount_" + item.Id;
                                <tr class="tableRow" id="rowId">
                                    <th scope="row"></th>
                                    <td id="@dateId">@item.Date</td>
                                    <td id="@payeeId">@item.Payee</td>
                                    <td id="@amountId">$@item.Amount</td>
                                    <td id="@typeId">@item.Type</td>
                                    <td id="@categoryId">@item.Category</td>
                                    @if (@item.CreditAccount == null)
                                    {
                                        <td id="@creditAccountId"></td>
                                    }
                                    else
                                    {
                                        <td id="@creditAccountId">$@item.?CreditAccount.Name</td>
                                    }
                                    @if (@item.DebitAccount == null)
                                    {
                                        <td id="@debitAccountId"></td>
                                    }
                                    else
                                    {
                                        <td id="@debitAccountId">$@item.?DebitAccount.Name</td>
                                    }
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@section scripts {
    
    <script type="text/javascript">

        /* updateType variables */
        var transactionType = document.getElementById('Type');
        var creditAccountDiv = document.getElementById('divCreditAccount');
        var debitAccountDiv = document.getElementById('divDebitAccount');

        

        function chart() {

            const metrics = @Html.Raw(Json.Encode(@Model.Metrics));
            const expensesByMonth = metrics.ExpensesByMonth;
            const incomeByMonth = metrics.IncomeByMonth;
            const transfersByMonth = metrics.TransfersByMonth;

            const expensesLength = Object.keys(expensesByMonth).length;
            const incomeLength = Object.keys(incomeByMonth).length;
            const transferLength = Object.keys(transfersByMonth).length;

            let monthsArray = new Array(expensesLength);
            let expensesArray = new Array(expensesLength);
            let incomeArray = new Array(incomeLength);
            let transferArray = new Array(transferLength);
            let highestAmount = 0;


            for (let prop in expensesByMonth) {
                if (expensesByMonth.hasOwnProperty(prop)) {
                    monthsArray.push(prop);
                    expensesArray.push(expensesByMonth[prop]);
                    if (expensesByMonth[prop] > highestAmount) {
                        highestAmount = expensesByMonth[prop];
                    }
                }
            }

            for (let prop in incomeByMonth) {
                if (incomeByMonth.hasOwnProperty(prop)) {
                    incomeArray.push(incomeByMonth[prop]);
                    if (incomeByMonth[prop] > highestAmount) {
                        highestAmount = incomeByMonth[prop];
                    }
                }
            }

            for (let prop in transfersByMonth) {
                if (transfersByMonth.hasOwnProperty(prop)) {
                    transferArray.push(transfersByMonth[prop]);
                    if (transfersByMonth[prop] > highestAmount) {
                        highestAmount = transfersByMonth[prop];
                    }
                }
            }

            monthsArray = monthsArray.filter(function(n) { return n != undefined });
            expensesArray = expensesArray.filter(function(n) { return n != undefined });
            incomeArray = incomeArray.filter(function(n) { return n != undefined });
            transferArray = transferArray.filter(function(n) { return n != undefined });

            var dataTable = new window.google.visualization.DataTable();

            var data = [['Month', 'Income', 'Expense']];

            var i;
            for (i = 0; i <= monthsArray.length; i++) {
                data.push([monthsArray[i], incomeArray[i], expensesArray[i]]);
            };

            var numRows = data.length;
            var numCols = data[0].length;

            dataTable.addColumn('string', data[0][0]);

            for (i = 1; i < numCols; i++)
                dataTable.addColumn('number', data[0][i]);

            for (i = 1; i < numRows; i++)
                dataTable.addRow(data[i]);

            var options = {
                width: "auto",
                pointSize: 8,
                lineWidth: 2,
                height: "250",
                backgroundColor: "transparent",
                colors: ["#32CA0A", "#EB5E28"],
                tooltip: {
                    textStyle: {
                        color: "#3D4849",
                        fontSize: 12
                    },
                    showColorCode: true
                },
                legend: {
                    textStyle: {
                        color: "black",
                        border: 2,
                        fontSize: 12
                    }
                },
                chartArea: {
                    left: 50,
                    top: 25,
                    height: "85%"
                },

                vAxis: {
                    gridlines: {
                        color: "transparent"
                    }
                }
            };

            var googleChart = new window.google.visualization.AreaChart(document.getElementById("chartTransactions"));
            googleChart.draw(dataTable, options);
        };

        function updateType() {
            // 0 - Income, 1 - Expense, 2 - Transfer
            if (transactionType.value === "0") {
                creditAccountDiv.style.display = "none";
                debitAccountDiv.style.display = "none";
            } else if (transactionType.value === "1") {
                creditAccountDiv.style.display = "block";
                debitAccountDiv.style.display = "none";
            } else if (transactionType.value === "2") {
                creditAccountDiv.style.display = "block";
                debitAccountDiv.style.display = "block";
            }
        };

        function rowSelected(e) {
            const id = e.target.id.split('_')[1];

            const date = $('#transactionDate_' + id).length ? $('#transactionDate_' + id).text() : '';
            const payee = $('#transactionPayee_' + id).length ? $('#transactionPayee_' + id).text() : '';
            const amount = $('#transactionAmount_' + id).length ? $('#transactionAmount_' + id).text() : '';
            const type = $('#transactionType_' + id).length ? $('#transactionType_' + id).text() : '';
            const category = $('#transactionCategory_' + id).length ? $('#transactionCategory_' + id).text() : '';
            const creditAccount = $('#transactionCreditAccount_' + id).length ? $('#transactionCreditAccount_' + id).text() : '';
            const debitAccount = $('#transactionDebitAccount_' + id).length ? $('#transactionDebitAccount_' + id).text() : '';

            $('#selectedTransactionEmptyText').css('display', 'none');
            $('#selectedTransactionFooter').css('display', 'block');
            $('#selectedTransactionPayee').text(payee);
            $('#selectedTransactionDate').text(date);
            $('#selectedTransactionAmount').text(amount);
            $('#selectedTransactionType').text(type);
            $('#selectedTransactionCategory').text(category);
            $('#selectedTransactionFrom').text(creditAccount);
            $('#selectedTransactionTo').text(debitAccount);
        };

        function addTableListeners() {
            $('.tableRow').click(rowSelected);
        };


        document.addEventListener("DOMContentLoaded", updateType);
        document.addEventListener("DOMContentLoaded", addTableListeners);
        transactionType.addEventListener('change', updateType);


        google.load("visualization",
            "1",
            {
                packages: ["corechart"]
            });

        $(document).ready(function() { chart(); });

    </script>
}

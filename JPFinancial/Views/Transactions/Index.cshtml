@using JPFData.Enumerations
@model JPFData.ViewModels.TransactionViewModel

@{
    ViewBag.Title = "Transactions";
}


@using (Html.BeginForm(FormMethod.Post))
{
    <div class="content">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card">
                        <div class="header">
                            <header>Balances</header>
                        </div>
                        <div class="content">
                            <div id="chartTransactions" class="ct-chart"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div id="selectedAccountDiv">Selected Account</div>
            </div>
            <div class="col-md-12">
                <table class="table table-striped table-dark">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th scope="col">Date</th>
                            <th scope="col">Amount</th>
                            <th scope="col">Type</th>
                            <th scope="col">Category</th>
                            <th scope="col">From</th>
                            <th scope="col">To</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th scope="row" id="addAccountIcon"><a href="@Url.Action("Create","Transactions")"><i class="fa fa-plus-circle"></i></a></th>
                            <td>
                                <div class="form-group">
                                    @Html.EditorFor(model => Model.Transaction.Date, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => Model.Transaction.Date, "", new { @class = "text-danger" })
                                </div>
                            </td>
                            <td>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">$</span>
                                    </div>
                                    <input type="text" class="form-control" aria-label="Amount" id="newTransactionAmount">
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @Html.EnumDropDownListFor(model => model.Transaction.Category, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Transaction.Category, "", new { @class = "text-danger" })
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.Transaction.CreditAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => Model.Accounts, "", new { @class = "text-danger" })
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    @Html.DropDownListFor(model => model.Transaction.DebitAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Accounts, "", new { @class = "text-danger" })
                                </div>
                            </td>
                        </tr>
                        @foreach (var item in Model.Transactions.OrderByDescending(t => t.Date).ThenBy(t => t.Amount))
                        {
                            <tr>
                                <th scope="row"></th>
                                <td>@item.Date</td>
                                <td>$@item.Amount</td>
                                <td>@item.Type</td>
                                <td>@item.Category</td>
                                @if (@item.CreditAccount == null)
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td>$@item.?CreditAccount.Name</td>
                                }
                                @if (@item.DebitAccount == null)
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td>$@item.?DebitAccount.Name</td>
                                }
                            </tr>

                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@section scripts {
    <!--   Core JS Files   -->
    <script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
    <script src="../../Scripts/bootstrap-paper.min.js" type="text/javascript"></script>

    <!--  Charts Plugin -->
    <script src="../../Scripts/chartist.min.js"></script>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script> ;
    <script>

        /* General javascript Begin */

        var filterOptionDiv = document.getElementById('divFilter');
        filterOptionDiv.style.display = "block";

        /* General javascript End */


        /* Graph Begin */
        google.load("visualization",
            "1",
            {
                packages: ["corechart"]
            });

        $(document).ready(function() {
            chart();


            var $transactions = $('.transactionRow');

            debugger;
        });

        function chart() {
            var metrics = @Html.Raw(Json.Encode(@Model.Metrics));
            var expensesByMonth = metrics.ExpensesByMonth;
            var incomeByMonth = metrics.IncomeByMonth;
            var transfersByMonth = metrics.TransfersByMonth;

            var expensesLength = Object.keys(expensesByMonth).length;
            var incomeLength = Object.keys(incomeByMonth).length;
            var transferLength = Object.keys(transfersByMonth).length;

            var monthsArray = new Array(expensesLength);
            var expensesArray = new Array(expensesLength);
            var incomeArray = new Array(incomeLength);
            var transferArray = new Array(transferLength);
            var highestAmount = 0;


            for (prop in expensesByMonth) {
                if (expensesByMonth.hasOwnProperty(prop)) {
                    monthsArray.push(prop);
                    expensesArray.push(expensesByMonth[prop]);
                    if (expensesByMonth[prop] > highestAmount) {
                        highestAmount = expensesByMonth[prop];
                    }
                }
            }

            for (prop in incomeByMonth) {
                if (incomeByMonth.hasOwnProperty(prop)) {
                    incomeArray.push(incomeByMonth[prop]);
                    if (incomeByMonth[prop] > highestAmount) {
                        highestAmount = incomeByMonth[prop];
                    }
                }
            }

            for (prop in transfersByMonth) {
                if (transfersByMonth.hasOwnProperty(prop)) {
                    transferArray.push(transfersByMonth[prop]);
                    if (transfersByMonth[prop] > highestAmount) {
                        highestAmount = transfersByMonth[prop];
                    }
                }
            }

            monthsArray = monthsArray.filter(function(n) { return n != undefined });
            expensesArray = expensesArray.filter(function(n) { return n != undefined });
            incomeArray = incomeArray.filter(function(n) { return n != undefined });
            transferArray = transferArray.filter(function(n) { return n != undefined });

            var dataTable = new window.google.visualization.DataTable();

            var data = [['Month', 'Income', 'Expense']];

            var i;
            for (i = 0; i <= monthsArray.length; i++) {
                data.push([monthsArray[i], incomeArray[i], expensesArray[i]]);
            };

            var numRows = data.length;
            var numCols = data[0].length;

            dataTable.addColumn('string', data[0][0]);

            for (i = 1; i < numCols; i++)
                dataTable.addColumn('number', data[0][i]);

            for (i = 1; i < numRows; i++)
                dataTable.addRow(data[i]);

            var options = {
                width: "auto",
                pointSize: 8,
                lineWidth: 2,
                height: "225",
                backgroundColor: "transparent",
                colors: ["#32CA0A", "#EB5E28"],
                tooltip: {
                    textStyle: {
                        color: "#3D4849",
                        fontSize: 12
                    },
                    showColorCode: true
                },
                legend: {
                    textStyle: {
                        color: "black",
                        border: 2,
                        fontSize: 12
                    }
                },
                chartArea: {
                    left: 50,
                    top: 25,
                    height: "85%"
                },

                vAxis: {
                    gridlines: {
                        color: "transparent"
                    }
                }
            };

            var chart = new window.google.visualization.AreaChart(document.getElementById("chartTransactions"));
            chart.draw(dataTable, options);

            /* Graph End */
        }
    </script>
}

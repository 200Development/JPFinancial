@model JPFData.ViewModels.TransactionViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    @Html.HiddenFor(model => model.Transaction.UserId);
    <div class="form-horizontal">
        <h4>Transaction</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Transaction.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Transaction.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Payee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Transaction.Payee, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Payee, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Memo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Transaction.Memo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Memo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Transaction.Type, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Transaction.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Category, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.Transaction.Category, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Transaction.Category, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div id="divCreditAccount">
            <div class="form-group">
                <label class="control-label col-md-2">Credit</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Transaction.CreditAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => Model.Accounts, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="divDebitAccount">
            <div class="form-group">
                <label class="control-label col-md-2">Debit</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Transaction.DebitAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Accounts, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Transaction.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Transaction.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Amount, "", new { @class = "text-danger" })
            </div>
        </div>
        
        @*<div class="form-group">
            @Html.LabelFor(model => model.Transaction.UsedCreditCard, "Charged to Credit Card?", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.Transaction.UsedCreditCard, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
        
        <div class="form-group">
            <label class="control-label col-md-2">Credit Card</label>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Transaction.SelectedCreditCardAccountId, new SelectList(Model.CreditCards,"Id", "Name"), " ", htmlAttributes: new {@class = "form-control"})
                @Html.ValidationMessageFor(model => Model.CreditCards, "", new {@class = "text-danger"})
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    var transactionType = document.getElementById('Type');
    var creditAccountDiv = document.getElementById('divCreditAccount');
    var debitAccountDiv = document.getElementById('divDebitAccount');


    function updateType() {
        if (transactionType.value === "0") {
            creditAccountDiv.style.display = "none";
            debitAccountDiv.style.display = "block";
        } else if (transactionType.value === "1") {
            creditAccountDiv.style.display = "block";
            debitAccountDiv.style.display = "none";
        } else if (transactionType.value === "2") {
            creditAccountDiv.style.display = "block";
            debitAccountDiv.style.display = "block";
        }
    };


    document.addEventListener("DOMContentLoaded", function () {
        updateType();
    });

    transactionType.addEventListener('change', (event) => {
        updateType();
    });
</script>

@model JPFData.ViewModels.BillViewModel

@{
    ViewBag.Title = "Bills";
}


@Styles.Render("~/Content/bills.css")



<div class="content">
    <div class="row" id="expensesPartialView">
        <div class="col-md-12">
            <div class="card">
                <div class="header">
                    <h4 class="title">Upcoming Expenses</h4>
                </div>
                <div class="content">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.Action("PageExpenses")
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12" id="selectedDiv">
            @Html.Hidden("selectedBillId")
            @Html.Hidden("selectedAccountId")
            @Html.Hidden("selectedFrequencyId")
            <div class="card col-md-5 mx-auto border-dark text-center" id="selectedCard">
                <div class="card-title">
                    <div class="selectedInput selectedInputLabel">Name</div>
                    <div class="input-group justify-content-center selectedInput">
                        <input id="selectedBillName" type="text" />
                    </div>
                </div>
                <div>
                    <div class="card-body">
                        <h3 id="selectedBillEmptyText">Click on a row to edit or delete a bill</h3>

                        <div class="selectedInputLabel">Amount</div>
                        <div class="input-group justify-content-center selectedInput">
                            <div class="input-group-prepend">
                                <span class="input-group-text">$</span>
                            </div>
                            <input class="input-group" id="selectedBillAmountDue" step="0.01" type="number" />
                        </div>

                        <div class="selectedInputLabel">Due Date</div>
                        <div class="input-group justify-content-center selectedInput">
                            <input class="input-group" id="selectedBillDueDate" type="date" />
                        </div>

                        <div class="selectedInputLabel">Frequency</div>
                        <div class="input-group justify-content-center selectedInput">
                            @Html.EnumDropDownListFor(model => model.Bill.PaymentFrequency, "Payment Frequency", htmlAttributes: new { @class = "input-group" })
                            @Html.ValidationMessageFor(model => model.Bill.PaymentFrequency, "", new { @class = "text-danger" })
                        </div>

                        <div class="selectedInputLabel">Linked Account</div>
                        <div class="input-group justify-content-center selectedInput">
                            @Html.DropDownListFor(model => model.Bill.AccountId, new SelectList(Model.Accounts, "Id", "Name"), "--Select Account--", htmlAttributes: new { @class = "input-group", @id = "selectedAccountDD_selected" })
                            @Html.ValidationMessageFor(model => model.Bill.AccountId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="card-footer" id="selectedFooter">
                    <div id="footerOptions">
                        <button class="editButton btn btn-dark" id="editButton"><i class="fa fa-edit editIcon"></i><span>Save</span></button>
                        <button class="deleteButton btn btn-dark" id="deleteButton"><i class="fa fa-trash deleteIcon"></i><span>Delete</span></button>
                        <button class="cancelButton btn btn-dark" id="cancelButton" value="Cancel"><i class="fa fa-ban cancelIcon"></i><span>Cancel</span></button>
                    </div>
                    <div id="deleteConfirmationDiv">
                        <p><span style="float: left; margin: 12px 12px 20px 0;"></span>Deleting this bill will reset all paid expenses tied to this bill to unpaid. Are you sure?</p>
                        <div>
                            <button class="editButton btn btn-dark" id="yesDeleteButton" value="Yes"><span id="confirmBillDeletionSpan">Yes</span></button>
                            <button class="cancelButton btn btn-dark" id="noDeleteButton" value="Cancel"><span id="cancelBillDeletionSpan">Cancel</span></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="header">
                    <h4 class="title">Bills</h4>
                </div>
                <div class="content">
                    <div class="row">
                        <div class="col-md-12">
                            @Html.Action("PageBills")

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script type="text/javascript">

        let expenseTransaction = {};


        function rowSelected(e) {

            const id = e.target.id.split('_')[1];

            $('#selectedBillId').val(id);

            const name = $(`#billName_${id}`).length
                ? $(`#billName_${id}`).text()
                : '';

            const amountDueText = $(`#billAmountDue_${id}`).text()
                .replace('$', '')
                .replace(',', '');

            const amountDue = isNaN(Number(amountDueText))
                ? 0
                : Number(amountDueText);

            const dueDateText = $(`#billDueDate_${id}`).length
                ? $(`#billDueDate_${id}`).text()
                : '';

            const dueDateFields = dueDateText.split('/');
            const year = dueDateFields[2];
            const month = ('0' + dueDateFields[0]).slice(-2);
            const day = ('0' + dueDateFields[1]).slice(-2);
            const dueDate = `${year}-${month}-${day}`;

            const frequencyIdText = $('#billFrequencyId_' + id).text();
            const frequencyId = isNaN(Number(frequencyIdText))
                ? -1
                : Number(frequencyIdText);

            const accountId = Number($('#billAccountId_' + id).text()) !== NaN
                ? Number($('#billAccountId_' + id).text())
                : -1;


            $('#selectedBillEmptyText').css('display', 'none');
            $('.selectedInput').css('display', 'flex');
            $('.selectedInputLabel').css('display', 'block');
            $('#selectedFooter').css('display', 'block');
            $('#selectedBillName').val(name);
            $('#selectedBillAmountDue').val(amountDue);
            $('#selectedBillDueDate').val(dueDate);
            $('#Bill_PaymentFrequency').val(frequencyId);
            $('#Bill_AccountId').val(accountId);
        };

        function closeSelectedBillDiv(e) {

            e.preventDefault();
            e.stopPropagation();

            $('#selectedBillEmptyText').css('display', 'block');
            $('.selectedInput').css('display', 'none');
            $('.selectedInputLabel').css('display', 'none');
            $('#selectedFooter').css('display', 'none');
            $('#selectedBillName').val('');
            $('#selectedBillAmountDue').val(0);
            $('#selectedBillDueDate').val('');
            $('#Bill_PaymentFrequency').val(null);
            $('#Bill_AccountId').val(null);
        }

        function addBill(e) {

            e.preventDefault();
            e.stopPropagation();


            const data = {};
            data.Name = $('#newBillName').val() != undefined ? $('#newBillName').val() : null;
            data.AmountDue = $('#newBillAmountDue').val() != undefined ? $('#newBillAmountDue').val() : null;
            data.DueDate = $('#newBillDueDate').val() != undefined ? $('#newBillDueDate').val() : null;
            data.FrequencyId = $('#newBillFrequencyId').val() != undefined ? $('#newBillFrequencyId').val() : null;
            data.AccountId = $('#newBillAccountId').val() != undefined ? $('#newBillAccountId').val() : null;

            if ($('#newBillAccountId option:selected')[0].text === 'Add New Account') {
                data.AccountName = $('#newAccountName').val() != undefined ? $('#newAccountName').val() : null;
                data.AccountBalance = $('#newAccountBalance').val() != undefined ? $('#newAccountBalance').val() : null;
                data.AccountPaycheckContribution = $('#newAccountPaycheckContribution').val() != undefined ? $('#newAccountPaycheckContribution').val() : null;
                data.AccountId = 0;
            }

            $.ajax({
                type: 'POST',
                url: 'Bills/Create',
                dataType: 'json',
                data: data,
                success: function () {
                    window.location.reload();
                },
                failure: function (result) {
                    console.log('Failure adding bill: ' + result);
                    const rowExists = $('#addAccountRow');
                    if (rowExists.length) {
                        rowExists.remove();
                    }
                },
                error: function (error) {
                    console.log('Error adding bill: ' + error);
                    const rowExists = $('#addAccountRow');
                    if (rowExists.length) {
                        rowExists.remove();
                    }
                }
            });
        }

        function saveChanges(e) {

            e.preventDefault();
            e.stopPropagation();

            const data = {};
            data.Id = $('#selectedBillId').val() != undefined ? $('#selectedBillId').val() : null;
            data.Name = $('#selectedBillName').val() != undefined ? $('#selectedBillName').val() : null;
            data.AmountDue = $('#selectedBillAmountDue').val() != undefined ? $('#selectedBillAmountDue').val() : null;
            data.DueDate = $('#selectedBillDueDate').val() != undefined ? $('#selectedBillDueDate').val() : null;
            data.PaymentFrequency = $('#Bill_PaymentFrequency').val() != undefined ? $('#Bill_PaymentFrequency').val() : null;
            data.AccountId = $('#Bill_AccountId').val() != undefined ? $('#Bill_AccountId').val() : null;

            $.ajax({
                type: 'POST',
                url: 'Bills/EditBill',
                dataType: 'json',
                data: data,
                success: function () {
                    window.location.reload();
                },
                failure: function (result) {
                    console.log('Failure: ' + result);
                },
                error: function (error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function deleteConfirmation(e) {

            e.preventDefault();
            e.stopPropagation();

            $('#footerOptions').css('display', 'none');
            $('#deleteConfirmationDiv').css('display', 'block');

            //Unbind click event listener before adding to prevent stacking handler
            $('#yesDeleteButton').unbind('click');
            $('#noDeleteButton').unbind('click');

            $('#yesDeleteButton').click(deleteConfirmed);
            $('#noDeleteButton').click(deleteCancelled);
        };

        function deleteConfirmed(e) {

            e.preventDefault();
            e.stopPropagation();

            const data = {};
            data.Id = $('#selectedBillId').val() != undefined ? $('#selectedBillId').val() : null;

            $.ajax({
                type: 'POST',
                url: 'Bills/DeleteBill',
                dataType: 'json',
                data: data,
                success: function (result) {
                    window.location.reload();
                },
                failure: function (result) {
                    console.log('Failure: ' + result);
                },
                error: function (error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function deleteCancelled(e) {

            e.preventDefault();
            e.stopPropagation();

            $('#footerOptions').css('display', 'block');
            $('#deleteConfirmationDiv').css('display', 'none');
        };

        function payBill(e) {

            e.preventDefault();
            e.stopPropagation();

            const id = e.target.id.split('_')[1];

            const confirmStr = 'Add Transaction?';

            let confirmHtml = `<div class="card col-md-5 mx-auto border-dark text-center" id="confirmTransactionDiv">`;
            confirmHtml += `<div class="card-title">`;
            confirmHtml += `<div class="justify-content-center">` + confirmStr + `</div>`;
            confirmHtml += `</div><div>`;
            confirmHtml += `<button id="withTransactionButton_` + id + `" class="btn btn-dark">Yes</button>`;
            confirmHtml += `<button id="withoutTransactionButton_` + id + `" class="btn btn-dark">No</button>`;
            confirmHtml += `</div></div></div>`;

            $('#payExpenseDiv').append(confirmHtml);
            $('#withTransactionButton_' + id).click({ id: id }, setPaidWithTransaction);
            $('#withoutTransactionButton_' + id).click({ id: id }, setPaidWithoutTransaction);
        };

        function setPaidWithTransaction(e) {

            e.preventDefault();
            e.stopPropagation();

            const id = e.data.id;
            expenseTransaction = {};
            expenseTransaction = buildExpenseModel(id);

            $('#confirmTransactionDiv').empty();

            let editTransaction = `<div class="card-body"><div>Amount</div>`;
            editTransaction += `<div class="input-group justify-content-center">`;
            editTransaction += `<div class="input-group-prepend"><span class="input-group-text">$</span></div>`;
            editTransaction += `<input class="input-group" id="expenseTransactionAmount" type="number" value="` +
                expenseTransaction.Amount +
                `"/></div>`;
            editTransaction += `<div>Paid On</div><div class="input-group justify-content-center">`;
            editTransaction += `<input class="input-group" id="expenseTransactionDate" type="date" value="` +
                expenseTransaction.Due +
                `" /></div>`;
            editTransaction +=
                `<div><button class="btn btn-dark" id="createTransactionButton">Create Transaction</button>`;
            editTransaction += `<button class="btn btn-dark" id="cancelTransactionButton">Cancel</button></div>`;

            $('#confirmTransactionDiv').append(editTransaction);

            $('#createTransactionButton').click(createTransaction);
            $('#cancelTransactionButton').click(cancelTransaction);
        };

        function createTransaction(e) {

            e.preventDefault();
            e.stopPropagation();

            const amountText = $('#expenseTransactionAmount').val().replace('$', '');
            expenseTransaction.Amount = Number(amountText) !== NaN ? Number(amountText) : expenseTransaction.Amount;
            expenseTransaction.Due = $('#expenseTransactionDate') !== undefined
                ? $('#expenseTransactionDate').val()
                : expenseTransaction.Due;

            $.ajax({
                url: 'Bills/SetExpenseToPaidWithTransaction',
                type: 'POST',
                dataType: 'json',
                data: expenseTransaction,
                success: function () {
                    window.location.reload();
                },
                failure: function (result) {
                    console.log('Failure: ' + result);
                },
                error: function (error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function cancelTransaction(e) {

            e.preventDefault();
            e.stopPropagation();

            $('#confirmTransactionDiv').remove();
        }

        function setPaidWithoutTransaction(e) {

            e.preventDefault();
            e.stopPropagation();

            const id = e.data.id;
            const data = buildExpenseModel(id);

            $.ajax({
                url: 'Bills/SetExpenseToPaid',
                type: 'POST',
                dataType: 'json',
                data: data,
                success: function () {
                    window.location.reload();
                },
                failure: function (result) {
                    console.log('Failure: ' + result);
                },
                error: function (error) {
                    console.log('Error: ' + error);
                }
            });
        };

        function buildExpenseModel(id) {

            const name = $('#expenseName_' + id).length ? $('#expenseName_' + id).text() : '';

            const amountText = $('#expenseAmountDue_' + id).text().replace('$', '');
            const amount = Number(amountText) !== NaN ? Number(amountText) : 0;

            const dueDateText = $('#expenseDueDate_' + id).length ? $('#expenseDueDate_' + id).text() : '';
            const dateFields = dueDateText.split('/');
            const year = dateFields[2];
            const month = ('0' + dateFields[0]).slice(-2);
            const day = ('0' + dateFields[1]).slice(-2);
            const date = year + '-' + month + '-' + day;

            const creditAccountIdElement = $('#expenseCreditAccountId_' + id)[0];
            const creditAccountId =
                Number(creditAccountIdElement.value) !== NaN ? Number(creditAccountIdElement.value) : 0;

            const transaction = {};
            transaction.Id = id;
            transaction.Name = name;
            transaction.Due = date;
            transaction.Amount = amount;
            transaction.CreditAccountId = creditAccountId;


            return transaction;
        }

        function setHiddenForAccount(e) {

            e.preventDefault();
            e.stopPropagation();

            const selected = $('#Bill.AccountId').prevObject[0];
            const activeElement = selected.activeElement;
            const value = activeElement.value;

            $('#selectedAccountId').val(value);
        };

        function setHiddenForFrequency(e) {

            e.preventDefault();
            e.stopPropagation();

            const selected = $('#Bill.PaymentFrequency').prevObject[0];
            const activeElement = selected.activeElement;
            const value = activeElement.value;

            $('#selectedFrequencyId').val(value);
        };

        function relatedAccountChanged(e) {
            e.preventDefault();
            e.stopPropagation();

            const item = $(this).find('option:selected');
            const text = item.html(); //get the selected option text
            if (text === "Add New Account") {

                const tableRow = $('<tr>').addClass('tableRow');
                tableRow.attr('id', 'addAccountRow');

                const tableCol = $('<td>').attr('colspan', 6);
                tableRow.append(tableCol);

                const table = $('<table>').addClass('table table-striped table-dark');
                table.attr('id', 'newAccountTable');

                const header = $('<thead>');
                const headerCols = '<tr>' +
                    '<th class="tdWidth"></th>' +
                    '<th class="tdWidth"></th>' +
                    '<th class="tdWidth"></th>' +
                    '<th class="tdWidth">Name</th>' +
                    '<th class="tdWidth">Balance</th>' +
                    '<th class="tdWidth">Paycheck Contribution</th>' +
                    '</tr>';
                header.append(headerCols);
                table.append(header);

                const tableBody = $('<tbody>');
                const tableColumns = $('<tr>' +
                    '<td class="tdWidth tdInput"></td>' +
                    '<td class="tdWidth tdInput"></td>' +
                    '<td class="tdWidth tdInput"></td>' +
                    '<td class="tdWidth tdInput"><input type="text" id="newAccountName" /></td>' +
                    '<td class="tdWidth tdInput"><input type="text" id="newAccountBalance" /></td>' +
                    '<td class="tdWidth tdInput"><input type="text" id="newAccountPaycheckContribution"/></td>' +
                    '</tr>');
                tableBody.append(tableColumns);
                table.append(tableBody);

                tableCol.append(table);
                tableRow.insertAfter($(this).parents().closest('tr'));

                $('#newAccountTable').css('background-color', '#212529');
                $('.tdWidth').css('width', '16%');
            } else {
                const rowExists = $('#addAccountRow');
                if (rowExists.length) {
                    rowExists.remove();
                }
            }
        }

        function relatedAccountChanged_selected() {

            e.preventDefault();
            e.stopPropagation();

            const item = $(this).find('option:selected');
            const text = item.html(); //get the selected option text
            if (text === "Other") {
                $('#addNewAccountToSelectList_Selected').css('display', 'block'); //display the add new dialog
            }
        }

        function addNewAccount() {
            
            const newitem = $('#txtNewOption').val();
            const newOption = '<option value="' + newitem + '">' + newitem + '</option>';
            $(newOption).insertBefore($("#ddlCity option:last"));
            $('#selectedAccountDD').val(newitem);
            return false;
        }

        function addNewAccount_selected() {

            const newitem = $('#txtNewOption').val();
            const newOption = '<option value="' + newitem + '">' + newitem + '</option>';
            $(newOption).insertBefore($("#ddlCity option:last"));
            $('#selectedAccountDD_selected').val(newitem);
            return false;
        }

        function addTableListeners() {

            $('.tableRow').unbind('click').click(rowSelected);
            $('.payBillButtons').unbind('click').click(payBill);
            $('#addButton').unbind('click').click(addBill);
            $('#editButton').unbind('click').click(saveChanges);
            $('#deleteButton').unbind('click').click(deleteConfirmation);
            $('#cancelButton').unbind('click').click(closeSelectedBillDiv);
            $('#newBillAccountId').unbind('click').change(relatedAccountChanged);
            $('#selectedAccountDD_selected').unbind('click').change(relatedAccountChanged_selected);
            $('#btnAddNewAccount').unbind('click').click(addNewAccount);
            $('#btnAddNewItem_Selected').unbind('click').click(addNewAccount_selected);
        };
        

        document.addEventListener("DOMContentLoaded", addTableListeners);

    </script>
}






@model JPFData.ViewModels.AccountViewModel

@{
    ViewBag.Title = "Accounts";
}

@Styles.Render("~/Content/Accounts.css")

@using (Html.BeginForm("Create", "Accounts", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="content">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Balances</h4>
                    </div>
                    <div class="content">
                        <div id="chartAccounts" class="ct-chart"></div>
                    </div>
                </div>
            </div>


            <div class="col-md-12" id="selectedAccountDiv">

                <div class="card col-md-5 mx-auto border-dark" id="selectedAccountCard">
                    <div class="card-title">
                        <h1 id="selectedAccountName"></h1>
                    </div>
                    <div>
                        <div class="card-body">
                            <h3 id="selectedAccountEmptyText">Click on a row to edit or delete a bill</h3>
                            <h3 id="selectedAccountBalance"></h3>
                            <h3 id="selectedAccountRequiredSavings"></h3>
                            <h3 id="selectedAccountPaycheckContribution"></h3>
                        </div>
                    </div>
                    <div class="card-footer" id="selectedAccountFooter">
                        <button class="editButton btn btn-dark" type="submit"><i class="fa fa-edit editIcon"></i><span id="editSelectedAccountSpan">Edit</span></button>
                        <button class="deleteButton btn btn-dark" type="submit"><i class="fa fa-trash deleteIcon"></i><span id="deleteSelectedAccountSpan">Delete</span></button>
                    </div>
                </div>
                <div class="col-md-12">
                    <table class="table table-striped table-dark">
                        <thead>
                            <tr>
                                <th scope="col"></th>
                                <th scope="col">Name</th>
                                <th scope="col">Balance</th>
                                <th scope="col">Required Savings</th>
                                <th scope="col">Paycheck Contribution</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th scope="row" class="addButtonColumn"><button class="addButton" type="submit"><i class="fa fa-plus-circle addIcon"></i></button></th>
                                <td>
                                    @Html.EditorFor(model => model.Account.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Account.Name, "", new { @class = "text-danger" })
                                </td>
                                <td>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">$</span>
                                        </div>
                                        @Html.EditorFor(model => model.Account.Balance, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Account.Balance, "", new { @class = "text-danger" })
                                    </div>
                                </td>
                                <td></td>
                                <td></td>
                            </tr>
                            @foreach (var item in Model.Accounts.OrderByDescending(a => a.Balance).ThenBy(b => b.Name))
                            {
                                var rowId = "rowId_" + item.Id;
                                var nameId = "accountName_" + item.Id;
                                var balanceId = "accountBalance_" + item.Id;
                                var requiredSavingsId = "accountRequiredSavings_" + item.Id;
                                var paycheckContributionId = "accountPaycheckContribution_" + item.Id;
                                <tr class="tableRow" id="@rowId">
                                    <th scope="row"></th>
                                    <td id="@nameId">@item.Name</td>
                                    <td id="@balanceId">$@item.Balance</td>
                                    <td id="@requiredSavingsId">$@item.RequiredSavings</td>
                                    <td id="@paycheckContributionId">$@item.PaycheckContribution</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@section scripts {

    <!--  Charts Plugin -->
  
    <script type="text/javascript">


        function rowSelected (e) {
            const id = e.target.id.split('_')[1];

            const name = $('#accountName_' + id).length ? $('#accountName_' + id).text() : '';
            const balance = $('#accountBalance_' + id).length ? $('#accountBalance_' + id).text() : '';
            const requiredSavings = $('#accountRequiredSavings_' + id).length ? $('#accountRequiredSavings_' + id).text() : '';
            const paycheckContribution = $('#accountPaycheckContribution_' + id).length ? $('#accountPaycheckContribution_' + id).text() : '';


            $('#selectedAccountEmptyText').css('display', 'none');
            $('#selectedAccountFooter').css('display', 'block');
            $('#selectedAccountName').text(name);
            $('#selectedAccountBalance').text(balance);
            $('#selectedAccountRequiredSavings').text(requiredSavings);
            $('#selectedAccountPaycheckContribution').text(paycheckContribution);
        };

        function chart () {
            const accounts = @Html.Raw(Json.Encode(@Model.Accounts.OrderByDescending(a => a.Balance).Take(8)));
            const dataTable = new window.google.visualization.DataTable();
            const accountsLength = Object.keys(accounts).length;
            var accountsArray = new Array(accountsLength);

            //Add each Account from Model to an array to iterate through
            for (let prop in accounts) {
                if (Object.prototype.hasOwnProperty.call(accounts, prop)) {
                    accountsArray.push(accounts[prop]);
                }
            }

            //Remove any undefined Accounts
            accountsArray = accountsArray.filter(function(n) { return n != undefined });

            //Set the graph X (Account) and Y (CurrentBalance) values
            const data = [['Account', 'Current Balance']];

            //Iterate through Accounts array to add each account to the graph.
            for (let i = 0; i < accountsArray.length; i++) {
                if (accountsArray[i]['Balance'] === 0) continue; //Exclude any Accounts with a balance of $0.00
                data.push([accountsArray[i]['Name'], accountsArray[i]['Balance']]);
            };

            const numRows = data.length;
            const numCols = data[0].length;

            dataTable.addColumn('string', data[0][0]);

            for (let i = 1; i < numCols; i++)
                dataTable.addColumn('number', data[0][1]);

            for (let i = 1; i < numRows; i++)
                dataTable.addRow(data[i]);

            const options = {
                width: "auto",
                pointSize: 8,
                lineWidth: 2,
                height: "250",
                backgroundColor: "transparent",
                colors: ["#7AC29A"],
                tooltip: {
                    textStyle: {
                        color: "#666666",
                        fontSize: 12
                    },
                    showColorCode: false
                },
                legend: {
                    textStyle: {
                        color: "black",
                        fontSize: 12
                    }
                },
                chartArea: {
                    left: 50,
                    top: 25,
                    height: "85%"
                },

                vAxis: {
                    gridlines: {
                        color: "transparent"
                    }
                }
            };

            const chart = new window.google.visualization.ColumnChart(document.getElementById("chartAccounts"));
            chart.draw(dataTable, options);
        };

        function addTableListeners() {
            $('.tableRow').click(rowSelected);
        }


        google.load("visualization",
            "1",
            {
                packages: ["corechart"]
            });


        $(document).ready(function() { chart(); });

        document.addEventListener("DOMContentLoaded", addTableListeners);
    </script>
}

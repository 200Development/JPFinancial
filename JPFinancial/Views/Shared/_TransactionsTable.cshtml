@using PagedList.Mvc
@model JPFData.ViewModels.TransactionViewModel


<table class="table table-striped table-dark" id="transactionsTable">
    <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Date</th>
            <th scope="col">Payee</th>
            <th scope="col">Amount</th>
            <th scope="col">Type</th>
            <th scope="col">Category</th>
            <th scope="col">From</th>
        </tr>
    </thead>
    <tbody>
    <tr>
        <th scope="row" class="addButtonColumn"><button class="addButton" type="submit"><i class="fa fa-plus-circle addIcon"></i></button></th>
        <td>
            <div class="form-group">
                @Html.EditorFor(model => Model.Transaction.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => Model.Transaction.Date, "", new { @class = "text-danger" })
            </div>
        </td>
        <td>
            <div class="form-group">
                @Html.EditorFor(model => model.Transaction.Payee, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Payee, "", new { @class = "text-danger" })
            </div>
        </td>
        <td>
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">$</span>
                </div>
                @Html.EditorFor(model => model.Transaction.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Transaction.Amount, "", new { @class = "text-danger" })
            </div>
        </td>
        <td>
            <div class="form-group">
                @Html.EnumDropDownListFor(model => model.Type, htmlAttributes: new { @class = "form-control", @onchange = "setHiddenForType(event)" })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </td>
        <td>
            <div class="form-group">
                @Html.EnumDropDownListFor(model => model.Category, htmlAttributes: new { @class = "form-control", @onchange = "setHiddenForCategory(event)" })
                @Html.ValidationMessageFor(model => model.Category, "", new { @class = "text-danger" })
            </div>
        </td>
        <td>
            <div class="form-group" id="divCreditAccount">
                @Html.DropDownListFor(model => model.Transaction.CreditAccountId, new SelectList(Model.Accounts, "Id", "Name"), " ", htmlAttributes: new { @class = "form-control", @onchange = "setHiddenForCreditAccount(event)" })
                @Html.ValidationMessageFor(model => Model.Accounts, "", new { @class = "text-danger" })
            </div>
        </td>          
    </tr>
    @if (Model != null && Model.PagedTransactions.Count > 0)
    {
        foreach (var item in Model.PagedTransactions)
        {

            var rowId = "rowId_" + item.Id;
            var dateId = "transactionDate_" + item.Id;
            var payeeId = "transactionPayee_" + item.Id;
            var amountId = "transactionAmount_" + item.Id;
            var typeNameId = "transactionType_" + item.Id;
            var typeId = "transactionTypeId_" + item.Id;
            var typeIdValue = (int) item.Type;
            var categoryNameId = "transactionCategory_" + item.Id;
            var categoryId = "transactionCategoryId_" + item.Id;
            var categoryIdValue = (int) item.Category;
            var creditAccountNameId = "transactionCreditAccount_" + item.Id;
            var creditAccountId = "transactionCreditAccountId_" + item.Id;
            var creditAccountIdValue = item.CreditAccountId;
            <tr class="tableRow" id="@rowId">
                <th scope="row"></th>
                <td id="@dateId">@item.Date.ToShortDateString()</td>
                <td id="@payeeId">@item.Payee</td>
                <td id="@amountId">$@item.Amount</td>
                <td id="@typeNameId">@item.Type</td>
                <td id="@categoryNameId">@item.Category</td>
                @if (@item.CreditAccount != null)
                {
                    <td id="@creditAccountNameId">@item.CreditAccount.Name</td>
                }
                else
                {
                    <td id="@creditAccountNameId"></td>
                }
                <td id="@typeId" style="display: none">@typeIdValue</td>
                <td id="@categoryId" style="display: none">@categoryIdValue</td>
                <td id="@creditAccountId" style="display: none">@creditAccountIdValue</td>
            </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="6">No Transactions</td>
        </tr>
    }
    </tbody>
    <tfoot>
        @if (Model != null && Model.PagedTransactions.Count != 0)
        {
            <tr>
                <td colspan="4">
                    <div class="fixed-table-pagination" style="display: block;">
                        <div class="pull-left">
                            @Html.PagedListPager(Model.PagedTransactions,
                                page => Url.Action("PageTransactions", "Transactions", new
                                                {
                                                    page,
                                                    pageSize = Model.PagedTransactions.PageSize,
                                                    TotalItemCount = Model.PagedTransactions.TotalItemCount,
                                                    CurrentPage = Model.PagedTransactions.PageNumber,
                                                    sortOrder = "",
                                                    fieldName = "",
                                                    IsShowControls = false,
                                                    IsShowFirstLast = false,
                                                    IsShowPages = true
                                                }),
                                PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(
                                    new PagedListRenderOptions(),
                                    new AjaxOptions()
                                    {
                                        HttpMethod = "GET",
                                        UpdateTargetId = "transactionsTable"
                                    }))
                        </div>
                        <div class="pull-right pagination-detail header-title pd-tp-bt-10">
                            <span class="pagination pagination-info">
                                Page @(Model.PagedTransactions.PageCount < Model.PagedTransactions.PageNumber ? 0 : Model.PagedTransactions.PageNumber) of @Model.PagedTransactions.PageCount
                                /
                                @(Model.PagedTransactions.TotalItemCount) items in @(Model.PagedTransactions.PageCount) pages
                            </span>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tfoot>
</table>

